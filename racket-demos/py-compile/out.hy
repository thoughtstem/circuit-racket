(import tslib) (import (tslib (*))) (defn update () (global state) (do (if (. state ["memory"] ["blade-on"]) (if (loud-noise) (clash-fx) (flicker-fx)) (set-lights (, 0 0 0))))) (defn loud-noise () (global state) (do (< 5 (. state ["hardware"] ["mic-level"])))) (defn clash-fx () (global state) (do (play-tone 0.1 392.0) (play-tone 0.05 220.0) (for (n (range 2)) (set-lights (, 255 255 255)) (do (render) (time.sleep 0.2)) (set-lights (, 255 0 0)) (do (render) (time.sleep 0.2))))) (defn flicker-fx () (global state) (do (set-lights [(max 0 (- (. (. state ["memory"] ["color"]) [0]) (int (+ 0 (* 255 (random.random)))))) (max 0 (- (. (. state ["memory"] ["color"]) [1]) (int (+ 0 (* 255 (random.random)))))) (max 0 (- (. (. state ["memory"] ["color"]) [2]) (int (+ 0 (* 255 (random.random))))))]))) (defn blade-off () (global state) (do (for (n (range 10)) (set-light n (, 0 0 0)) (do (render) (time.sleep 0.025))) (do (setv (. state ["memory"] ["blade-on"]) False) state))) (defn blade-on () (global state) (do (for (n (range 10)) (set-light n (. state ["memory"] ["color"])) (do (render) (time.sleep 0.05))) (do (setv (. state ["memory"] ["blade-on"]) True) state))) (defn setup () (global state) (do (do (setv (. state ["memory"] ["color"]) (, 0 255 0)) state) (do (setv (. state ["memory"] ["blade-on"]) False) state))) (setup) (while True (if (not (= BUTTON_A.value BUTTON_A_prev)) (if BUTTON_A.value (if (. state ["memory"] ["blade-on"]) (blade-off) (blade-on)))) (update-buttons) (ir-receive) (hardware-update) (update) (render))